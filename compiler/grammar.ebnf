program
  = { statement };

statement
  = function_declaration
  | return_statement
  | variable_declaration_statement
  | expression_statement
  | scope;

function_declaration 
  = "func" identifier "(" [ variable_declaration { "," variable_declaration } ] ")" "->" identifier 
    scope;

scope
  = "{" { statement } "}";

variable_declaration
  = identifier identifier;

variable_declaration_statement
  = variable_declaration terminator;

return_statement
 = "return" expression terminator;

expression_statement
  = expression terminator;

expression
  = assignment_operation
  | function_call;

function_call
  = identifier "(" [ expression { "," expression } ] ")";

assignment_operation
  = equality_operation [arithmetic_operator] "=" equality_operation;

equality_operation
  = comparison_operation { ( "==" | "!=" ) comparison_operation };

comparison_operation
  = term_operation { ( ">" | ">=" | "<=" | "<" ) term_operation };

term_operation
  = factor_operation { ( "+" | "-" ) factor_operation };

factor_operation
  = unary_operation { ( "/" | "*" ) unary_operation };

unary_operation
  = ( "!" | "-" ) unary_operation
  | base_operation;

base_operation
  = integer_literal
  | identifier
  | "(" expression ")";

identifier
  = (letter | "_" ) { letter | digit | "_" };

terminator
  = ";";

digit
  = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "0";

integer_literal
  = digit { digit };

letter
  = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";